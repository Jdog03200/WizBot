<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="clashofclans_base_already_claimed" xml:space="preserve">
    <value>That base is already claimed or destroyed.</value>
  </data>
  <data name="clashofclans_base_already_destroyed" xml:space="preserve">
    <value>That base is already destroyed.</value>
  </data>
  <data name="clashofclans_base_already_unclaimed" xml:space="preserve">
    <value>That base is not claimed.</value>
  </data>
  <data name="clashofclans_base_destroyed" xml:space="preserve">
    <value>**DESTROYED** base #{0} in a war against {1}</value>
  </data>
  <data name="clashofclans_base_unclaimed" xml:space="preserve">
    <value>{0} has **UNCLAIMED** base #{1} in a war against {2}</value>
  </data>
  <data name="clashofclans_claimed_base" xml:space="preserve">
    <value>{0} claimed a base #{1} in a war against {2}</value>
  </data>
  <data name="clashofclans_claimed_other" xml:space="preserve">
    <value>@{0} You already claimed base #{1}. You can't claim a new one.</value>
  </data>
  <data name="clashofclans_claim_expired" xml:space="preserve">
    <value>Claim from @{0} for a war against {1} has expired.</value>
  </data>
  <data name="clashofclans_enemy" xml:space="preserve">
    <value>Enemy</value>
  </data>
  <data name="clashofclans_info_about_war" xml:space="preserve">
    <value>Info about war against {0}</value>
  </data>
  <data name="clashofclans_invalid_base_number" xml:space="preserve">
    <value>Invalid base number.</value>
  </data>
  <data name="clashofclans_invalid_size" xml:space="preserve">
    <value>Not a Valid war size.</value>
  </data>
  <data name="clashofclans_list_active_wars" xml:space="preserve">
    <value>List Of Active Wars</value>
  </data>
  <data name="clashofclans_not_claimed" xml:space="preserve">
    <value>not claimed</value>
  </data>
  <data name="clashofclans_not_partic" xml:space="preserve">
    <value>You are not participating in that war.</value>
  </data>
  <data name="clashofclans_not_partic_or_destroyed" xml:space="preserve">
    <value>@{0} You are either not participating in that war, or that base is already destroyed.</value>
  </data>
  <data name="clashofclans_no_active_wars" xml:space="preserve">
    <value>No active wars.</value>
  </data>
  <data name="clashofclans_size" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="clashofclans_war_already_started" xml:space="preserve">
    <value>War against {0} has already started.</value>
  </data>
  <data name="clashofclans_war_created" xml:space="preserve">
    <value>War against {0} created.</value>
  </data>
  <data name="clashofclans_war_ended" xml:space="preserve">
    <value>War against {0} ended.</value>
  </data>
  <data name="clashofclans_war_not_exist" xml:space="preserve">
    <value>That war does not exist.</value>
  </data>
  <data name="clashofclans_war_started" xml:space="preserve">
    <value>War against {0} started!</value>
  </data>
  <data name="customreactions_all_stats_cleared" xml:space="preserve">
    <value>All custom reaction stats cleared.</value>
  </data>
  <data name="customreactions_deleted" xml:space="preserve">
    <value>Custom Reaction deleted</value>
  </data>
  <data name="customreactions_insuff_perms" xml:space="preserve">
    <value>Insufficient permissions. Requires Bot ownership for global custom reactions, and Administrator for server custom reactions.</value>
  </data>
  <data name="customreactions_list_all" xml:space="preserve">
    <value>List of all custom reactions</value>
  </data>
  <data name="customreactions_name" xml:space="preserve">
    <value>Custom Reactions</value>
  </data>
  <data name="customreactions_new_cust_react" xml:space="preserve">
    <value>New Custom Reaction</value>
  </data>
  <data name="customreactions_no_found" xml:space="preserve">
    <value>No custom reactions found.</value>
  </data>
  <data name="customreactions_no_found_id" xml:space="preserve">
    <value>No custom reaction found with that id.</value>
  </data>
  <data name="customreactions_response" xml:space="preserve">
    <value>Response</value>
  </data>
  <data name="customreactions_stats" xml:space="preserve">
    <value>Custom Reaction Stats</value>
  </data>
  <data name="customreactions_stats_cleared" xml:space="preserve">
    <value>Stats cleared for {0} custom reaction.</value>
  </data>
  <data name="customreactions_stats_not_found" xml:space="preserve">
    <value>No stats for that trigger found, no action taken.</value>
  </data>
  <data name="customreactions_trigger" xml:space="preserve">
    <value>Trigger</value>
  </data>
  <data name="pokemon_already_fainted" xml:space="preserve">
    <value>{0} has already fainted.</value>
  </data>
  <data name="pokemon_already_full" xml:space="preserve">
    <value>{0} already has full HP.</value>
  </data>
  <data name="pokemon_already_that_type" xml:space="preserve">
    <value>Your type is already {0}</value>
  </data>
  <data name="pokemon_attack" xml:space="preserve">
    <value>used {0}{1} on {2}{3} for {4} damage.</value>
  </data>
  <data name="pokemon_cant_attack_again" xml:space="preserve">
    <value>You can't attack again without retaliation!</value>
  </data>
  <data name="pokemon_cant_attack_yourself" xml:space="preserve">
    <value>You can't attack yourself.</value>
  </data>
  <data name="pokemon_fainted" xml:space="preserve">
    <value>{0} has fainted!</value>
  </data>
  <data name="pokemon_healed" xml:space="preserve">
    <value>healed {0} with one {1}</value>
  </data>
  <data name="pokemon_hp_remaining" xml:space="preserve">
    <value>{0} has {1} HP remaining.</value>
  </data>
  <data name="pokemon_invalid_move" xml:space="preserve">
    <value>You can't use {0}. Type `{1}ml` to see a list of moves you can use.</value>
  </data>
  <data name="pokemon_moves" xml:space="preserve">
    <value>Movelist for {0} type</value>
  </data>
  <data name="pokemon_not_effective" xml:space="preserve">
    <value>It's not effective.</value>
  </data>
  <data name="pokemon_no_currency" xml:space="preserve">
    <value>You don't have enough {0}</value>
  </data>
  <data name="pokemon_revive_other" xml:space="preserve">
    <value>revived {0} with one {1}</value>
  </data>
  <data name="pokemon_revive_yourself" xml:space="preserve">
    <value>You revived yourself with one {0}</value>
  </data>
  <data name="pokemon_settype_success" xml:space="preserve">
    <value>Your type has been changed to {0} for a {1}</value>
  </data>
  <data name="pokemon_somewhat_effective" xml:space="preserve">
    <value>It's somewhat effective.</value>
  </data>
  <data name="pokemon_super_effective" xml:space="preserve">
    <value>It's super effective!</value>
  </data>
  <data name="pokemon_too_many_moves" xml:space="preserve">
    <value>You used too many moves in a row, so you can't move!</value>
  </data>
  <data name="pokemon_type_of_user" xml:space="preserve">
    <value>Type of {0} is {1}</value>
  </data>
  <data name="pokemon_user_not_found" xml:space="preserve">
    <value>User not found.</value>
  </data>
  <data name="pokemon_you_fainted" xml:space="preserve">
    <value>You fainted, so you are not able to move!</value>
  </data>
</root>